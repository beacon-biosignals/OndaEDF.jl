var documenterSearchIndex = {"docs":
[{"location":"#API-Documentation-1","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"#","page":"API Documentation","title":"API Documentation","text":"CurrentModule = OndaEDF","category":"page"},{"location":"#","page":"API Documentation","title":"API Documentation","text":"import_edf!\nexport_edf","category":"page"},{"location":"#OndaEDF.import_edf!","page":"API Documentation","title":"OndaEDF.import_edf!","text":"import_edf!(dataset::Dataset, edf::EDF.File, uuid::UUID=uuid4();\n            custom_extractors=(), import_annotations::Bool=true)\n\nCreate, store, and return a uuid::UUID => recording::Onda.Recording where all the signals in recording are converted from the provided edf. Collections of EDF.Signals are mapped as channels to Onda.Signals via simple \"extractor\" callbacks of the form:\n\nedf::EDF.File -> (onda_signal_name::Symbol,\n                  onda_signal::Onda.Signal,\n                  edf_signals::Vector{EDF.Signal})\n\nimport_edf! automatically uses a variety of default extractors derived from the EDF standard texts; see src/standards.jl for details. The caller can also provide additional extractors via the custom_extractors keyword argument.\n\nEDF.Signal labels that are converted into Onda channel names undergo the following transformations:\n\nthe label is whitespace-stripped, parens-stripped, and lowercased\ntrailing generic EDF references (e.g. \"ref\", \"ref2\", etc.) are dropped\nany instance of + is replaced with _plus_ and / with _over_\nall component names are converted to their \"canonical names\" when possible (e.g. \"m1\" in an EEG-matched channel name will be converted to \"a1\").\n\nIf import_annotations is true, any EDF+ annotations in edf will be written out as Onda annotations to recording.\n\nSee the OndaEDF README for additional details regarding EDF formatting expectations.\n\n\n\n\n\n","category":"function"},{"location":"#OndaEDF.export_edf","page":"API Documentation","title":"OndaEDF.export_edf","text":"export_edf(dataset::Dataset, uuid::UUID; signal_names=keys(dataset.recordings[uuid].signals))\n\nReturn an EDF.File containing signal data converted from dataset.recordings[uuid].\n\nEach EDF.Signal in the returned EDF.File corresponds to a channel of an Onda.Signal; only signals whose names are given in signal_names are exported.\n\nThe ordering of EDF.Signals in the output will match the order of the given signal_names (and within each channel grouping, the order of the signal's channels).\n\n\n\n\n\n","category":"function"}]
}
